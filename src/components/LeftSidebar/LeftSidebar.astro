---
import { parsePages, parseSections, removeTrailingSlash } from "@/utils/content";
import { cacheOnFirstRun } from "@/utils/cache";
import type { MarkdownInstance, MDXInstance } from "astro";

type Props = {
  currentPage: string;
};

const { currentPage } = Astro.props as Props;
const normalizedCurrentPage = removeTrailingSlash(currentPage);

const isDocs = normalizedCurrentPage.startsWith("/docs");
const postsKey = "docs";

const posts = await cacheOnFirstRun(`${postsKey}-posts`, async () => {
  let postsMd: MarkdownInstance<Record<string, any>>[] = []
  if (isDocs) {
    postsMd = await Astro.glob("../../pages/docs/**/*.md");
  }

  let postsMdx: MDXInstance<Record<string, any>>[] = []
   if (isDocs) {
    postsMdx = await Astro.glob("../../pages/docs/**/*.mdx");
  }

  return [...postsMd, ...postsMdx];
});

const parsed = parsePages(posts);
const parsedSections = parseSections(parsed);
---

<nav aria-labelledby="grid-left">
  <ul class="nav-groups">
    {
      parsedSections.map(({ title, children }) => (
        <li>
          <div class="nav-group">
            <h2
              class={
                normalizedCurrentPage.includes(title.toLowerCase().replaceAll(" ", "-")) ? "nav-group-title current-group-title" : "nav-group-title"
              }
            >
              {title}
            </h2>
            <ul>
              {children.map((child) => {
                if ("link" in child) {
                  const url = child?.link;
                  return (
                    <li class="nav-link">
                      <a href={url} aria-current={normalizedCurrentPage === child.link ? "page" : false}>
                        {child.title}
                      </a>
                    </li>
                  );
                } else if ("children" in child) {
                  const shouldBeOpen = child.children.some((c) => "link" in c && c.link === normalizedCurrentPage);
                  return (
                    <details class="child-section" open={shouldBeOpen}>
                      <summary>
                        <p class="nav-link-child-title">{child.title}</p>
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" class="icon" viewBox="0 0 24 24" stroke-width="3" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
                        </svg>
                      </summary>
                      <ul>
                        {child.children.map((child) => {
                          if ("children" in child) return;
                          const url = child.link;

                          return (
                            <li class="nav-link">
                              <a href={url} aria-current={normalizedCurrentPage === child.link ? "page" : false}>
                                {child.title}
                              </a>
                            </li>
                          );
                        })}
                      </ul>
                    </details>
                  );
                }
              })}
            </ul>
          </div>
        </li>
      ))
    }
  </ul>
</nav>

<script is:inline>
  window.addEventListener("DOMContentLoaded", () => {
    var target = document.querySelector('[aria-current="page"]');
    if (target && target.offsetTop > window.innerHeight - 100) {
      document.querySelector(".nav-groups").scrollTop = target.offsetTop;
    }
  });
</script>

<style>
  nav {
    width: 100%;
    margin-right: 1rem;
  }

  .nav-groups {
    height: 100%;
    padding: 2rem 0;
    overflow-x: visible;
    overflow-y: auto;
    max-height: 100vh;
  }

  .nav-groups > li + li {
    margin-top: 2rem;
  }

  .nav-groups > :first-child {
    padding-top: var(--doc-padding);
  }

  .nav-groups > :last-child {
    padding-bottom: 2rem;
    margin-bottom: var(--theme-navbar-height);
  }

  .nav-group-title {
    font-size: 1rem;
    font-weight: 700;
    padding: 0.1rem 1rem;
    margin-bottom: 0.5rem;
  }

  details.child-section > summary .icon {
    transition: all 0.3s;
    width: 20px;
    height: 20px;
    display: block;
  }

  details.child-section[open] summary .icon {
    transform: rotate(90deg);
  }

  .child-section summary {
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    margin: 1px;
    padding: 0.3rem 1rem;
    border-radius: 5px;
  }

  .child-section summary:hover,
  .child-section summary:focus {
    background-color: var(--theme-bg-hover);
  }

  .child-section summary::-webkit-details-marker {
    display: none;
  }

  .child-section,
  .nav-link {
    margin-left: 1rem;
  }

  .nav-link-child-title {
    font-size: 1rem;
    font: inherit;
    color: inherit;
    text-decoration: none;
    display: block;
  }

  .nav-link a {
    font-size: 1rem;
    margin: 1px;
    padding: 0.3rem 1rem;
    font: inherit;
    color: inherit;
    text-decoration: none;
    display: block;
    border-radius: 5px;
  }

  .nav-link a:hover,
  .nav-link a:focus {
    background-color: var(--theme-bg-hover);
  }

  .nav-link a[aria-current="page"] {
    color: var(--theme-text-accent);
    background-color: var(--theme-bg-accent);
    font-weight: 600;
  }

  @media (min-width: 50em) {
    .nav-groups {
      padding: 0;
    }
  }
</style>

<style is:global>
  :root.theme-dark .nav-link a[aria-current="page"] {
    color: hsla(var(--color-base-white), 100%, 1);
  }
</style>
